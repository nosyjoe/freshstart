apply plugin: "jacoco"

jacoco {
    // I have only tried 0.7.x
    toolVersion = '0.7.4.201502262128'
}
// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java/',
        'build/generated/source/db',
        'build/generated/source/r/debug',
        'build/generated/source/buildConfig/debug'
]

// This differs per what flavors buildTypes etc.
// But this example shows the 'testDebug'
// which is standard for Robolectric
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    // class R is used, but usage will not be covered, so ignore this class from report
    // This differs per plugin version (0.10 -> 0.11)
    // have very different fileTrees.
    // I have added rules to Ignore Dagger/Butterknife
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/freshstart/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('./build/jacoco/testDebug.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('./app/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
    afterEvaluate {
        // just clean up coveralls dashboard, following reports are not of interest
        testDebug.reports.junitXml.enabled = false
    }
}
